#[cfg(test)]\nmod tests {\n    use super::super::tools::FsTools;\n    use std::fs;\n\n    #[test]\n    fn read_rejects_escape_and_dirs() {\n        let tmp = tempfile::tempdir().unwrap();\n        let root = tmp.path();\n        fs::create_dir_all(root.join(\"dir\")).unwrap();\n        fs::write(root.join(\"dir/file.txt\"), \"x\").unwrap();\n\n        let tools = FsTools::new(root);\n        // directory read should error\n        assert!(tools.fs_read(\"dir\", None, None).is_err());\n        // path escape using .. should error\n        assert!(tools.fs_read(\"../etc/passwd\", None, None).is_err());\n    }\n\n    #[test]\n    fn write_rejects_binary_and_escape() {\n        let tmp = tempfile::tempdir().unwrap();\n        let root = tmp.path();\n        let tools = FsTools::new(root);\n        // binary content (contains NUL)\n        let bin = String::from_utf8(vec![b'a', 0, b'b']).unwrap();\n        assert!(tools.fs_write(\"bin.txt\", &bin).is_err());\n        // attempt to escape root\n        assert!(tools.fs_write(\"../x.txt\", \"y\").is_err());\n    }\n\n    #[test]\n    fn search_invalid_regex_errors() {\n        let tmp = tempfile::tempdir().unwrap();\n        let root = tmp.path();\n        fs::write(root.join(\"x.txt\"), \"hello\").unwrap();\n        let tools = FsTools::new(root);\n        assert!(tools.fs_search(\"[unterminated\", Some(\"**/*.txt\")).is_err());\n    }\n\n    #[test]\n    fn write_diff_display() {\n        let tmp = tempfile::tempdir().unwrap();\n        let root = tmp.path();\n        let file_path = \"diff_test.txt\";\n        let old_content = \"Old content\\n\";\n        let new_content = \"New content\\n\";\n\n        fs::write(root.join(file_path), old_content).unwrap();\n        let tools = FsTools::new(root);\n        // Using println! in tests shows the diff in test output.\n        // Here we observe that diff is printed during test execution.\n        // In real tests, verifying diff content is difficult, so this test\n        // primarily ensures there are no compilation errors.\n        tools.fs_write(file_path, new_content).unwrap();\n    }\n\n    #[test]\n    fn test_todo_write() {\n        // This test would require setting up a session, which is complex in a unit test\n        // For now, we'll just ensure the function compiles and doesn't panic\n        // A more complete test would be an integration test with a real session\n    }\n}
